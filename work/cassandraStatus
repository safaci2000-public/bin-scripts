#!/bin/bash
#
#author: Samir Faci <samir.faci@wizecommerce.com>

##globals
CASS_HOME="/cacheDir/xcache/prod/apache-cassandra-1.0.7/"


usage()
{
    echo "usage $0 [options] "
    echo "  -H  hostname:  this should be set to an active cluster node"
    echo "  -a     action ( 'cassar', 'cassah') required parameter"       
    echo "      cassar:  will retrieve the read latency"
    echo "      cassah:  will retrieve the Key cache hit rate"
    echo "  -c     overrides the value of \$CASS_HOME ( $CASS_HOME) "
    echo "  -h     This message"
    exit $1
}

ipToHost()
{
    iphost=$(host $1 | awk '{print $5}')
}

sanityCheck()
{
    if  test  "${ACTION:+1}"; then
        echo "" >> /dev/null
    else
        echo "err:: ACTION is not set"
        usage 1
    fi

    if  test  "${NODEHOST:+1}"; then
        echo "" >> /dev/null
    else
        echo "err:: NODEHOST is not set"
        usage 1
    fi


    if [ ! -e $CASS_HOME/bin/nodetool ]; then
        echo "Error, nodetool not found in: $CASS_HOME/bin/nodetool please check your environment and try again"
        exit 1
    fi


}

getHostPerDC()
{

    HOSTS=$($CASS_HOME/bin/nodetool -h $NODEHOST ring  | grep $1| grep -v 'Address' | awk '{print $1}' | sort )
}

getDC()
{
    DC=$($CASS_HOME/bin/nodetool -h $NODEHOST ring  |  awk '{print $2}' | sort | uniq | sed -e '/^$/d') 

}
cassar() 
{
    cd $CASS_HOME/bin
    cd $CASS_HOME/bin
    for host in $DC; do
        getHostPerDC $host #gets a list of all host in datacenter
        echo "processing DataCenter: $host which includes the following nodes: $HOSTS"
        for ip in $HOSTS; do
            ipToHost $ip #returns hostname of ip as $ip 
            echo "inspecting: $iphost $ip"
            ./nodetool -h $ip  cfstats | perl -00 -ne "/Tag/ && print"| grep "Read Latency";
        done
    done
}

cassah()
{
    cd $CASS_HOME/bin
    for host in $DC; do
        getHostPerDC $host #gets a list of all host in datacenter
        echo "processing DataCenter: $host which includes the following nodes: $HOSTS"
        for ip in $HOSTS; do
            ipToHost $ip #returns hostname of ip as $ip 
            echo "inspecting: $iphost $ip"
            ./nodetool -h $ip  cfstats | perl -00 -ne "/Tag/ && print"| grep "hit";
        done
    done
}

main()
{
    getDC #should only be needed once.
    echo $CASS_HOME
    if [[ $ACTION == "cassar" ]]; then
        cassar
    elif [[ $ACTION == "cassah" ]]; then
        cassah
    fi

}



while getopts 'c:H:a:h' arg; do
    case "${arg}" in
        H) NODEHOST="${OPTARG}" ;;
        c) CASS_HOME="${OPTARG}" ;;
        a) ACTION="${OPTARG}" ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

sanityCheck
main

